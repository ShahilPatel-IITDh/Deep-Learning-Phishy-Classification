<!doctype html>
<html lang="zh-cn">
<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <meta name="referrer" content="no-referrer-when-downgrade">
    

    <title>Prometheus存储机制 | CLSN - 惨绿少年博客</title>
    <meta property="og:title" content="Prometheus存储机制 - CLSN - 惨绿少年博客">
    <meta property="og:type" content="article">
        
    <meta property="article:published_time" content='2022-06-28T18:50:07&#43;08:00'>
        
        
    <meta property="article:modified_time" content='2022-06-28T18:50:07&#43;08:00'>
        
    <meta name="Keywords" content="">
    <meta name="description" content="Prometheus存储机制">
        <meta name="author" content="惨绿少年">
        
    <meta property="og:url" content="https://clsn.io/post/2022-06-28-prometheus%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6.html">
    <link rel="shortcut icon" href='/favicon.ico'  type="image/x-icon">

    <link rel="stylesheet" href='/css/normalize.css'>
    <link rel="stylesheet" href='/css/style.css'>
    <script type="text/javascript" src="//cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

    
    
    
    
    
    
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4280799943500919" crossorigin="anonymous"></script>
</head>


<body>
    <header id="header" class="clearfix">
    <div class="container">
        <div class="col-group">
            <div class="site-name ">
                
                    <a id="logo" href="https://clsn.io/">
                        CLSN - 惨绿少年博客
                    </a>
                
                
            </div>
            <div>
                <nav id="nav-menu" class="clearfix">
                    <a class="current" href="https://clsn.io/">首页</a>
                    
                    <a  href="https://clsn.io/archives.html" title="归档">归档</a>
                    
                    <a  href="https://clsn.io/about.html" title="关于">关于</a>
                    
                </nav>
            </div>
        </div>
    </div>
</header>

    <div id="body">
        <div class="container">
            <div class="col-group">

                <div class="col-8" id="main">
                    
<div class="res-cons">
    
    <article class="post">
        <header>
            <h1 class="post-title">Prometheus存储机制</h1>
        </header>
        <date class="post-meta meta-date">
            2022年6月28日
        </date>
        
        <div class="post-meta">
            <span>|</span>
            
            <span class="meta-category"><a href='/categories/%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88.html'>📂监控方案</a></span>
            
            <span class="meta-category"><a href='/categories/prometheus.html'>📂Prometheus</a></span>
            
        </div>
        
        
        <div class="post-meta">
            <span id="busuanzi_container_page_pv">|<span id="busuanzi_value_page_pv"></span><span>
                    阅读</span></span>
        </div>
        
        
        <div class="post-content">
            <h2 id="概述">概述</h2>
<p>Prometheus提供了本地存储，即tsdb时序数据库，本地存储给Prometheus带来了简单高效的使用体验，prometheus2.0以后压缩数据能力也得到了很大的提升。可以在单节点的情况下满足大部分用户的监控需求。</p>
<p>但本地存储也限制了Prometheus的可扩展性，带来了数据持久化等一系列的问题。为了解决单节点存储的限制，prometheus没有自己实现集群存储，而是提供了远程读写的接口，让用户自己选择合适的时序数据库来实现prometheus的扩展性。</p>
<p>Prometheus 1.x版本的TSDB（V2存储引擎）基于LevelDB，并且使用了和Facebook Gorilla一样的压缩算法，能够将16个字节的数据点压缩到平均1.37个字节。</p>
<p>Prometheus 2.x版本引入了全新的V3存储引擎，提供了更高的写入和查询性能</p>
<p>以下所有内容均基于prometheus2.7版本</p>
<h2 id="本地存储">本地存储</h2>
<h4 id="存储原理">存储原理</h4>
<p>Prometheus按2小时一个block进行存储，每个block由一个目录组成，该目录里包含：一个或者多个chunk文件（保存timeseries数据）、一个metadata文件、一个index文件（通过metric name和labels查找timeseries数据在chunk文件的位置）。</p>
<p>最新写入的数据保存在内存block中，达到2小时后写入磁盘。为了防止程序崩溃导致数据丢失，实现了WAL（write-ahead-log）机制，启动时会以写入日志(WAL)的方式来实现重播，从而恢复数据。</p>
<p>删除数据时，删除条目会记录在独立的tombstone文件中，而不是立即从chunk文件删除。</p>
<p>通过时间窗口的形式保存所有的样本数据，可以明显提高Prometheus的查询效率，当查询一段时间范围内的所有样本数据时，只需要简单的从落在该范围内的块中查询数据即可。</p>
<p>这些2小时的block会在后台压缩成更大的block，数据压缩合并成更高level的block文件后删除低level的block文件。这个和leveldb、rocksdb等LSM树的思路一致。</p>
<p>这些设计和Gorilla的设计高度相似，所以Prometheus几乎就是等于一个缓存TSDB。它本地存储的特点决定了它不能用于long-term数据存储，只能用于短期窗口的timeseries数据保存和查询，并且不具有高可用性（宕机会导致历史数据无法读取）。</p>
<p>内存中的block数据未写入磁盘时，block目录下面主要保存wal文件:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./data/01BKGV7JBM69T2G1BGBGM6KB12
./data/01BKGV7JBM69T2G1BGBGM6KB12/meta.json
./data/01BKGV7JBM69T2G1BGBGM6KB12/wal/000002
./data/01BKGV7JBM69T2G1BGBGM6KB12/wal/000001
</code></pre></div><p>持久化的block目录下wal文件被删除，timeseries数据保存在chunk文件里。index用于索引timeseries在wal文件里的位置。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./data/01BKGV7JC0RY8A6MACW02A2PJD
./data/01BKGV7JC0RY8A6MACW02A2PJD/meta.json
./data/01BKGV7JC0RY8A6MACW02A2PJD/index
./data/01BKGV7JC0RY8A6MACW02A2PJD/chunks
./data/01BKGV7JC0RY8A6MACW02A2PJD/chunks/000001
./data/01BKGV7JC0RY8A6MACW02A2PJD/tombstones
</code></pre></div><h4 id="存储配置">存储配置</h4>
<p>对于本地存储，prometheus提供了一些配置项，主要包括：</p>
<ul>
<li>&ndash;storage.tsdb.path: 存储数据的目录，默认为data/，如果要挂外部存储，可以指定该目录</li>
<li>&ndash;storage.tsdb.retention.time: 数据过期清理时间，默认保存15天</li>
<li>&ndash;storage.tsdb.retention.size: 实验性质，声明数据块的最大值，不包括wal文件，如512MB</li>
<li>&ndash;storage.tsdb.retention: 已被废弃，改为使用storage.tsdb.retention.time</li>
</ul>
<p>Prometheus将所有当前使用的块保留在内存中。此外，它将最新使用的块保留在内存中，最大内存可以通过storage.local.memory-chunks标志配置。</p>
<p>监测当前使用的内存量：</p>
<ul>
<li>prometheus_local_storage_memory_chunks</li>
<li>process_resident_memory_bytes</li>
</ul>
<p>监测当前使用的存储指标：</p>
<ul>
<li>prometheus_local_storage_memory_series: 时间序列持有的内存当前块数量</li>
<li>prometheus_local_storage_memory_chunks: 在内存中持久块的当前数量</li>
<li>prometheus_local_storage_chunks_to_persist: 当前仍然需要持久化到磁盘的的内存块数量</li>
<li>prometheus_local_storage_persistence_urgency_score: 紧急程度分数</li>
</ul>
<h4 id="prometheus-20的存储升级">prometheus 2.0的存储升级</h4>
<p>prometheus 2.0于2017-11-08发布，主要是存储引擎进行了优化。</p>
<p>性能的整体提高：</p>
<ul>
<li>与 Prometheus 1.8 相比，CPU使用率降低了 20％ - 40％</li>
<li>与 Prometheus 1.8 相比，磁盘空间使用率降低了 33％ - 50％</li>
<li>没有太多查询，平均负载的磁盘 I/O&lt;1％</li>
</ul>
<p>在Kubernetes集群这样的动态环境中，prometheus的数据平面通常看起来是这种样式</p>
<ul>
<li>垂直维度表示所有存储的序列</li>
<li>水平维度表示样本传播的时间</li>
</ul>
<p>如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">requests_total<span style="color:#f92672">{</span>path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/status&#34;</span>, method<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;GET&#34;</span>, instance<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;10.0.0.1:80&#34;</span><span style="color:#f92672">}</span>
requests_total<span style="color:#f92672">{</span>path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/status&#34;</span>, method<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;POST&#34;</span>, instance<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;10.0.0.3:80&#34;</span><span style="color:#f92672">}</span>
requests_total<span style="color:#f92672">{</span>path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/&#34;</span>, method<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;GET&#34;</span>, instance<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;10.0.0.2:80&#34;</span><span style="color:#f92672">}</span>
</code></pre></div><p>
        <img class="mx-auto" alt="" src="/png/15523899232572.jpg" />   
    </p>
<p>Prometheus定期为所有系列收集新数据点，这意味着它必须在时间轴的右端执行垂直写入。但是，在查询时，我们可能希望访问平面上任意区域的矩形(各种label条件)</p>
<p>因此为了能够在大量数据中有效地查找查询序列，我们需要一个索引。</p>
<p>在Prometheus 1.x存储层可以很好地处理垂直写入模式，但是随着规模增大，索引或出现一些问题，因此在2.0版本中重新设计了存储引擎和索引，主要改造是：</p>
<p><strong>样本压缩</strong></p>
<p>现有存储层的样本压缩功能在Prometheus的早期版本中发挥了重要作用。单个原始数据点占用16个字节的存储空间。但当普罗米修斯每秒收集数十万个数据点时，可以快速填满硬盘。</p>
<p>但，同一系列中的样本往往非常相似，我们可以利用这一类样品（同样label）进行有效的压缩。批量压缩一系列的许多样本的块，在内存中，将每个数据点压缩到平均1.37字节的存储。</p>
<p>这种压缩方案运行良好，也保留在新版本2存储层的设计中。具体压缩算法可以参考：<a href="http://www.vldb.org/pvldb/vol8/p1816-teller.pdf">Facebook的“Gorilla”论文中</a></p>
<p><strong>时间分片</strong></p>
<p>我们将新的存储层划分为块（block），每个块在一段时间内保存所有序列。每个块充当独立数据库。</p>
<p>
        <img class="mx-auto" alt="" src="/png/15523908024948.jpg" />   
    </p>
<p>这样每次查询，仅检查所请求的时间范围内的块子集，查询执行时间自然会减少。</p>
<p>这种布局也使删除旧数据变得非常容易(这在1.x的存储设计中是一个很耗时的操作)。但在2.x中，一旦块的时间范围完全落后于配置的保留边界，它就可以完全丢弃。</p>
<p>
        <img class="mx-auto" alt="" src="/png/15523908501306.jpg" />   
    </p>
<p><strong>索引</strong></p>
<p>一般prometheus的查询是把metric+label做关键字的，而且是很宽泛，完全用户自定义的字符，因此没办法使用常规的sql数据库，prometheus的存储层使用了全文检索中的<a href="https://nlp.stanford.edu/IR-book/html/htmledition/a-first-take-at-building-an-inverted-index-1.html">倒排索引</a>概念，将每个时间序列视为一个小文档。而metric和label对应的是文档中的单词。</p>
<p>例如，requests_total{path=&quot;/status&quot;, method=&ldquo;GET&rdquo;, instance=&ldquo;10.0.0.1:80&rdquo;}是包含以下单词的文档：</p>
<ul>
<li><strong>name</strong>=&ldquo;requests_total&rdquo;</li>
<li>path=&quot;/status&quot;</li>
<li>method=&ldquo;GET&rdquo;</li>
<li>instance=&ldquo;10.0.0.1:80&rdquo;</li>
</ul>
<p><strong>基准测试</strong></p>
<p>cpu、内存、查询效率都比1.x版本得到了大幅度的提升</p>
<p>具体测试结果参考：https://dzone.com/articles/prometheus-2-times-series-storage-performance-anal</p>
<h4 id="故障恢复">故障恢复</h4>
<p>如果您怀疑数据库中的损坏引起的问题，则可以通过使用storage.local.dirtyflag配置，来启动服务器来强制执行崩溃恢复。</p>
<p>如果没有帮助，或者如果您只想删除现有的数据库，可以通过删除存储目录的内容轻松地启动：</p>
<ul>
<li>1.停止服务：stop prometheus.</li>
<li>2.删除数据目录：rm -r <!-- raw HTML omitted -->/*</li>
<li>3.启动服务：start prometheus</li>
</ul>
<h2 id="远程存储">远程存储</h2>
<p>Prometheus默认是自己带有存储的，保存的时间为15天。但本地存储也意味着Prometheus无法持久化数据，无法存储大量历史数据，同时也无法灵活扩展。
为了保证Prometheus的简单性，Prometheus并没有从自身集群的维度来解决这些问题，而是定义了两种接口，remote_write/remote_read，将数据抛出去，你自己处理。</p>
<p>Prometheus的remote_storage 其实是一个adapter，至于在adapter的另一端是什么类型的时序数据库它根本不关心，如果你愿意，你也可以编写自己的adpater。</p>
<p>如：存储的方式为：Prometheus —-发送数据—- &gt; remote_storage_adapter —- 存储数据 —-&gt; influxdb。</p>
<p>prometheus通过下面两种方式来实现与其他的远端存储系统对接：</p>
<ul>
<li>Prometheus 按照标准的格式将metrics写到远端存储</li>
<li>Prometheus 按照标准格式从远端的url来读取metrics</li>
</ul>
<p>
        <img class="mx-auto" alt="" src="/png/15523921859977.jpg" />   
    </p>
<h4 id="远程读">远程读</h4>
<p>在远程读的流程当中，当用户发起查询请求后，Promthues将向remote_read中配置的URL发起查询请求(matchers,ranges)，Adaptor根据请求条件从第三方存储服务中获取响应的数据。同时将数据转换为Promthues的原始样本数据返回给Prometheus Server。</p>
<p>当获取到样本数据后，Promthues在本地使用PromQL对样本数据进行二次处理。</p>
<h4 id="远程写">远程写</h4>
<p>用户可以在Promtheus配置文件中指定Remote Write(远程写)的URL地址，一旦设置了该配置项，Prometheus将样本数据通过HTTP的形式发送给适配器(Adaptor)。而用户则可以在适配器中对接外部任意的服务。外部服务可以是真正的存储系统，公有云的存储服务，也可以是消息队列等任意形式。</p>
<h4 id="配置">配置</h4>
<p>配置非常简单，只需要将对应的地址配置下就行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">remote_write</span>:
  - <span style="color:#f92672">url</span>: <span style="color:#e6db74">&#34;http://localhost:9201/write&#34;</span>

<span style="color:#f92672">remote_read</span>:
  - <span style="color:#f92672">url</span>: <span style="color:#e6db74">&#34;http://localhost:9201/read&#34;</span>
</code></pre></div><h4 id="社区支持">社区支持</h4>
<p>现在社区已经实现了以下的远程存储方案</p>
<ul>
<li>AppOptics: write</li>
<li>Chronix: write</li>
<li>Cortex: read and write</li>
<li>CrateDB: read and write</li>
<li>Elasticsearch: write</li>
<li>Gnocchi: write</li>
<li>Graphite: write</li>
<li>InfluxDB: read and write</li>
<li>OpenTSDB: write</li>
<li>PostgreSQL/TimescaleDB: read and write</li>
<li>SignalFx: write</li>
</ul>
<p>可以使用读写完整的InfluxDB，我们使用了多prometheus server同时远程读+写，验证了速度还是可以的。并且InfluxDB生态完整，自带了很多管理工具。</p>
<h2 id="容量规划">容量规划</h2>
<p>在一般情况下，Prometheus中存储的每一个样本大概占用1-2字节大小。如果需要对Prometheus Server的本地磁盘空间做容量规划时，可以通过以下公式计算：</p>
<pre tabindex="0"><code>磁盘大小 = 保留时间 * 每秒获取样本数 * 样本大小
</code></pre><p>保留时间(retention_time_seconds)和样本大小(bytes_per_sample)不变的情况下，如果想减少本地磁盘的容量需求，只能通过减少每秒获取样本数(ingested_samples_per_second)的方式。</p>
<p>因此有两种手段，一是减少时间序列的数量，二是增加采集样本的时间间隔。</p>
<p>考虑到Prometheus会对时间序列进行压缩，因此减少时间序列的数量效果更明显。</p>
<h2 id="其他">其他</h2>
<p>远程读写解决了Promtheus的数据持久化问题。使其可以进行弹性扩展。另外还支持联邦集群模式，用于解决横向扩展、网络分区的问题（如地域A+B+C的监控数据，统一汇总到D），联邦集群的配置将在后面的Promthues高可用文章中详细说明。</p>
<p>附：kubecon2018上讲Prometheus 2.0的帅哥</p>
<p>
        <img class="mx-auto" alt="" src="/png/15523932134405.jpg" />   
    </p>
<p>还有一本专门讲Prometheus的书：Prometheus: Up &amp; Running(600多页&hellip;)</p>
<p>国内没找到卖的，找到了一本英文pdf的，还在翻译理解中，有新的内容会继续同步在这个系列博客</p>
<p>
        <img class="mx-auto" alt="" src="/png/15523933135256.jpg" />   
    </p>
<p>。。。又找到一本：https://www.prometheusbook.com/</p>
<p>
        <img class="mx-auto" alt="" src="/png/15523938035455.jpg" />   
    </p>
<h4 id="参考资料">参考资料：</h4>
<ul>
<li><a href="https://prometheus.io/docs/prometheus/latest/storage/">https://prometheus.io/docs/prometheus/latest/storage/</a></li>
<li><a href="https://coreos.com/blog/prometheus-2.0-storage-layer-optimization?utm_source=blog&amp;utm_medium=referral">https://coreos.com/blog/prometheus-2.0-storage-layer-optimization?utm_source=blog&amp;utm_medium=referral</a></li>
<li><a href="https://dzone.com/articles/prometheus-2-times-series-storage-performance-anal">https://dzone.com/articles/prometheus-2-times-series-storage-performance-anal</a></li>
<li><a href="https://www.linuxidc.com/Linux/2018-04/152057.htm">https://www.linuxidc.com/Linux/2018-04/152057.htm</a></li>
<li><a href="http://ylzheng.com/2018/03/06/promethus-local-storage/">http://ylzheng.com/2018/03/06/promethus-local-storage/</a></li>
<li><a href="https://www.cnblogs.com/vovlie/p/7709312.html">https://www.cnblogs.com/vovlie/p/7709312.html</a></li>
<li><a href="https://files-cdn.cnblogs.com/files/vovlie/copyofprometheusstorage1-160127133731.pdf">https://files-cdn.cnblogs.com/files/vovlie/copyofprometheusstorage1-160127133731.pdf</a></li>
<li><a href="https://www.bookstack.cn/read/prometheus-manual/operating-storage.md?wd=%E5%A4%A7%E4%BA%8E">https://www.bookstack.cn/read/prometheus-manual/operating-storage.md?wd=%E5%A4%A7%E4%BA%8E</a></li>
</ul>
<p>本文为容器监控实践系列文章，完整内容见：<a href="https://yasongxu.gitbook.io/container-monitor/">container-monitor-book</a></p>
<blockquote>
<p>转载自
<a href="https://yasongxu.gitbook.io/container-monitor/">https://yasongxu.gitbook.io/container-monitor/</a></p>
</blockquote>

        </div>

        
<div class="post-archive">
    <ul class="post-copyright">
        <li><strong>原文作者：</strong><a rel="author" href="https://clsn.io/">惨绿少年</a></li>
        <li style="word-break:break-all"><strong>原文链接：</strong><a href="https://clsn.io/post/2022-06-28-prometheus%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6.html">https://clsn.io/post/2022-06-28-prometheus%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6.html</a></li>
        <li><strong>版权声明：</strong>本作品采用<a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，非商业转载请注明出处（作者，原文链接），商业转载请联系作者获得授权。</li>
    </ul>
</div>
<br/>



        


        <div class="post-meta meta-tags">
            
            没有标签
            
        </div>
    </article>
    
    

    
    
    <div class="post bg-white">
      <script src="https://utteranc.es/client.js"
            repo= "SummerShun/clsn.io"
            issue-term="pathname"
            theme="github-light"
            crossorigin="anonymous"
            async>
      </script>
    </div>
    
</div>

                    <footer id="footer">
    <div>
        &copy; 2023 <a href="https://clsn.io/">CLSN - 惨绿少年博客 By 惨绿少年</a>
        
    </div>
    <br />
    <div>
        <div class="github-badge">
            <a href="https://gohugo.io/" target="_black" rel="nofollow"><span class="badge-subject">Powered by</span><span class="badge-value bg-blue">Hugo</span></a>
        </div>
        <div class="github-badge">
            <a href="https://www.flysnow.org/" target="_black"><span class="badge-subject">Design by</span><span class="badge-value bg-brightgreen">飞雪无情</span></a>
        </div>
        <div class="github-badge">
            <a href="https://github.com/flysnow-org/maupassant-hugo" target="_black"><span class="badge-subject">Theme</span><span class="badge-value bg-yellowgreen">Maupassant</span></a>
        </div>
    </div>
</footer>


    
    <script type="text/javascript">
        window.MathJax = {
            tex2jax: {
                inlineMath: [['$', '$']],
                processEscapes: true
                }
            };
    </script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML' async></script>

<a id="rocket" href="#top"></a>
<script type="text/javascript" src='/js/totop.js?v=0.0.0' async=""></script>



    <script type="text/javascript" src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js" async></script>




                </div>

                <div id="secondary">
    <section class="widget">
        <form id="search" action='https://clsn.io/search/' method="get" accept-charset="utf-8" target="_blank" _lpchecked="1">
      
      <input type="text" name="q" maxlength="20" placeholder="Search">
      <input type="hidden" name="sitesearch" value="https://clsn.io/">
      <button type="submit" class="submit icon-search"></button>
</form>
    </section>
    
    <section class="widget">
        <h3 class="widget-title">最近文章</h3>
<ul class="widget-list">
    
    <li>
        <a href="https://clsn.io/post/2022-06-28-prometheus%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6.html" title="Prometheus存储机制">Prometheus存储机制</a>
    </li>
    
    <li>
        <a href="https://clsn.io/post/2022-06-28-prometheus%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.html" title="Prometheus数据可视化">Prometheus数据可视化</a>
    </li>
    
    <li>
        <a href="https://clsn.io/post/2022-06-28-prometheus%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0.html" title="Prometheus的配置与服务发现">Prometheus的配置与服务发现</a>
    </li>
    
    <li>
        <a href="https://clsn.io/post/2022-06-28-promql%E6%9F%A5%E8%AF%A2%E8%A7%A3%E6%9E%90.html" title="PromQL查询解析">PromQL查询解析</a>
    </li>
    
    <li>
        <a href="https://clsn.io/post/2022-06-28-prometheus%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88.html" title="Prometheus部署方案">Prometheus部署方案</a>
    </li>
    
    <li>
        <a href="https://clsn.io/post/2022-06-28-prometheus%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84.html" title="Prometheus基本架构">Prometheus基本架构</a>
    </li>
    
    <li>
        <a href="https://clsn.io/post/2022-06-28-prometheus%E6%A6%82%E8%BF%B0.html" title="Prometheus概述">Prometheus概述</a>
    </li>
    
    <li>
        <a href="https://clsn.io/post/2022-06-28-metric.html" title="K8S常用指标分析">K8S常用指标分析</a>
    </li>
    
    <li>
        <a href="https://clsn.io/post/2022-06-28-kubectl-top.html" title="从kubectl top看K8S监控原理">从kubectl top看K8S监控原理</a>
    </li>
    
    <li>
        <a href="https://clsn.io/post/2022-06-28-%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88.html" title="监控方案汇总">监控方案汇总</a>
    </li>
    
</ul>
    </section>

    

    <section class="widget">
        <h3 class="widget-title"><a href='/categories/'>分类</a></h3>
<ul class="widget-list">
    
    <li><a href="https://clsn.io/categories/kubernetes.html">Kubernetes (2)</a></li>
    
    <li><a href="https://clsn.io/categories/linux%E8%BF%90%E7%BB%B4.html">Linux运维 (139)</a></li>
    
    <li><a href="https://clsn.io/categories/mysql.html">MySQL (11)</a></li>
    
    <li><a href="https://clsn.io/categories/nosql.html">NoSQL (8)</a></li>
    
    <li><a href="https://clsn.io/categories/openstack.html">OpenStack (3)</a></li>
    
    <li><a href="https://clsn.io/categories/prometheus.html">Prometheus (9)</a></li>
    
    <li><a href="https://clsn.io/categories/shell%E7%BC%96%E7%A8%8B.html">Shell编程 (16)</a></li>
    
    <li><a href="https://clsn.io/categories/web%E5%BA%94%E7%94%A8.html">Web应用 (14)</a></li>
    
    <li><a href="https://clsn.io/categories/%E4%BA%91%E8%AE%A1%E7%AE%97.html">云计算 (18)</a></li>
    
    <li><a href="https://clsn.io/categories/%E5%AD%98%E5%82%A8.html">存储 (13)</a></li>
    
    <li><a href="https://clsn.io/categories/%E5%AE%89%E5%85%A8.html">安全 (26)</a></li>
    
    <li><a href="https://clsn.io/categories/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91.html">敏捷开发 (13)</a></li>
    
    <li><a href="https://clsn.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93.html">数据库 (20)</a></li>
    
    <li><a href="https://clsn.io/categories/%E7%8E%A9%E8%BD%AClinux.html">玩转Linux (68)</a></li>
    
    <li><a href="https://clsn.io/categories/%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88.html">监控方案 (12)</a></li>
    
    <li><a href="https://clsn.io/categories/%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1.html">监控服务 (11)</a></li>
    
    <li><a href="https://clsn.io/categories/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF.html">网络技术 (14)</a></li>
    
    <li><a href="https://clsn.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96.html">自动化 (23)</a></li>
    
    <li><a href="https://clsn.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96.html">虚拟化 (11)</a></li>
    
    <li><a href="https://clsn.io/categories/%E8%BF%90%E7%BB%B4%E5%9F%BA%E6%9C%AC%E5%8A%9F.html">运维基本功 (118)</a></li>
    
</ul>
    </section>

    <section class="widget">
        <h3 class="widget-title"><a href='/tags/'>标签</a></h3>
<div class="tagcloud">
    
</div>
    </section>

    
<section class="widget">
    <h3 class="widget-title">友情链接</h3>
    <ul class="widget-list">
        
        <li>
            <a target="_blank" href="http://clsn.cnblogs.com" title="惨绿少年(博客园)">惨绿少年(博客园)</a>
        </li>
        
        <li>
            <a target="_blank" href="https://yasongxu.gitbook.io/container-monitor/" title="container-monitor">container-monitor</a>
        </li>
        
    </ul>
</section>


    <section class="widget">
        <h3 class="widget-title">其它</h3>
        <ul class="widget-list">
            <li><a href="https://clsn.io/index.xml">文章 RSS</a></li>
        </ul>
    </section>
</div>
            </div>
        </div>
    </div>
<script defer src="https://static.cloudflareinsights.com/beacon.min.js/v8b253dfea2ab4077af8c6f58422dfbfd1689876627854" integrity="sha512-bjgnUKX4azu3dLTVtie9u6TKqgx29RBwfj3QXYt5EKfWM/9hPSAI/4qcV5NACjwAo8UtTeWefx6Zq5PHcMm7Tg==" data-cf-beacon='{"rayId":"81236db9cb8b9fc7","version":"2023.8.0","r":1,"b":1,"token":"1406d1473df744e994006d964d0b59b6","si":100}' crossorigin="anonymous"></script>
</body>

</html>